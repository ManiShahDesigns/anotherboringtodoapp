{"version":3,"sources":["todoitem/todoitem.js","todolist/todolist.js","addtodo/addtodo.js","logo/Logo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","toggleTodo","props","updateTodoFn","todo","this","className","completed","onClick","text","React","Component","TodoList","updateTodo","console","log","todos","map","_todo","_index","key","AddTodo","updateInput","e","setState","target","value","submitTodo","preventDefault","addTodoFunc","state","document","getElementById","onSubmit","id","onChange","type","placeholder","Logo","App","componentDidMount","localStorage","getItem","savedTodos","JSON","parse","addTodo","a","setItem","stringify","newTodos","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sWAqBeA,G,uNALbC,WAAa,WACX,EAAKC,MAAMC,aAAa,EAAKD,MAAME,O,wEAb3B,IACAA,EAASC,KAAKH,MAAdE,KACR,OACE,yBACEE,UAAW,YAAcF,EAAKG,UAAY,aAAe,IACzDC,QAASH,KAAKJ,YAEbG,EAAKK,U,GARSC,IAAMC,YCwBdC,E,2MANbC,WAAa,SAAAT,GACX,EAAKF,MAAMC,aAAaC,GACxBU,QAAQC,IAAIX,I,wEAnBJ,IAAD,OACCY,EAAUX,KAAKH,MAAfc,MACR,OACE,yBAAKV,UAAU,qBACZU,EAAMC,KAAI,SAACC,EAAOC,GACjB,OACE,kBAAC,EAAD,CACEhB,aAAc,EAAKU,WACnBO,IAAKD,EACLf,KAAMc,Y,GAVGR,IAAMC,WCsCdU,G,kBArCb,aAAe,IAAD,8BACZ,+CAyBFC,YAAc,SAAAC,GACZ,EAAKC,SAAS,CAAEpB,KAAMmB,EAAEE,OAAOC,SA3BnB,EA8BdC,WAAa,SAAAJ,GACXA,EAAEK,iBACF,EAAK1B,MAAM2B,YAAY,EAAKC,MAAM1B,MAClC2B,SAASC,eAAe,gBAAgBN,MAAQ,IA9BhD,EAAKI,MAAQ,CACX1B,KAAM,IAJI,E,sEAOJ,IAAD,OACP,OACE,yBAAKE,UAAU,oBACb,0BAAM2B,SAAU,SAAAV,GAAC,OAAI,EAAKI,WAAWJ,KACnC,2BACEjB,UAAU,QACV4B,GAAG,eACHC,SAAU,SAAAZ,GAAC,OAAI,EAAKD,YAAYC,IAChCa,KAAK,OACLC,YAAY,0BAEd,4BAAQ/B,UAAU,SAAS8B,KAAK,UAAhC,kB,GAnBY1B,IAAMC,Y,MCAb,SAAS2B,IACtB,OAAO,uD,IC2DMC,E,YAxDb,aAAe,IAAD,8BACZ,+CAgBFC,kBAAoB,WAClB,IAAMxB,EAAQyB,aAAaC,QAAQ,SACnC,GAAI1B,EAAO,CACT,IAAM2B,EAAaC,KAAKC,MAAM7B,GAC9B,EAAKQ,SAAS,CAAER,MAAO2B,MArBb,EA0BdG,QA1Bc,uCA0BJ,WAAM1C,GAAN,SAAA2C,EAAA,sEACF,EAAKvB,SAAS,CAClBR,MAAM,GAAD,mBACA,EAAKc,MAAMd,OADX,CAEH,CACEP,KAAML,EACNG,WAAW,OANT,OAURkC,aAAaO,QAAQ,QAASJ,KAAKK,UAAU,EAAKnB,MAAMd,QACxDF,QAAQC,IAAI0B,aAAaC,QAAQ,UAXzB,2CA1BI,wDAwCd7B,WAxCc,uCAwCD,WAAMT,GAAN,eAAA2C,EAAA,6DACLG,EAAW,EAAKpB,MAAMd,MAAMC,KAAI,SAAAC,GACpC,OAAId,IAASc,EACJ,CACLT,KAAML,EAAKK,KACXF,WAAYH,EAAKG,WAGZW,KARA,SAWL,EAAKM,SAAS,CAAER,MAAOkC,IAXlB,OAYXT,aAAaO,QAAQ,QAASJ,KAAKK,UAAU,EAAKnB,MAAMd,QAZ7C,2CAxCC,sDAEZ,EAAKc,MAAQ,CACXd,MAAO,IAHG,E,sEAQZ,OACE,yBAAKV,UAAU,WACb,kBAACgC,EAAD,MACA,kBAAC,EAAD,CAAST,YAAaxB,KAAKyC,UAC3B,kBAAC,EAAD,CAAU3C,aAAcE,KAAKQ,WAAYG,MAAOX,KAAKyB,MAAMd,a,GAbjDN,IAAMC,WCMJwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS1B,SAASC,eAAe,SD2H3C,kBAAmB0B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.73adf9a1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./todoitem.css\";\r\n\r\nclass TodoItem extends React.Component {\r\n  render() {\r\n    const { todo } = this.props;\r\n    return (\r\n      <div\r\n        className={\"todoitem\" + (todo.completed ? \" completed\" : \"\")}\r\n        onClick={this.toggleTodo}\r\n      >\r\n        {todo.text}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  toggleTodo = () => {\r\n    this.props.updateTodoFn(this.props.todo);\r\n  };\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport TodoItem from \"../todoitem/todoitem\";\r\n\r\nclass TodoList extends React.Component {\r\n  render() {\r\n    const { todos } = this.props;\r\n    return (\r\n      <div className=\"todoListContainer\">\r\n        {todos.map((_todo, _index) => {\r\n          return (\r\n            <TodoItem\r\n              updateTodoFn={this.updateTodo}\r\n              key={_index}\r\n              todo={_todo}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  updateTodo = todo => {\r\n    this.props.updateTodoFn(todo);\r\n    console.log(todo);\r\n  };\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport \"./addtodo.css\";\r\n\r\nclass AddTodo extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      todo: \"\"\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"addTodoContainer\">\r\n        <form onSubmit={e => this.submitTodo(e)}>\r\n          <input\r\n            className=\"input\"\r\n            id=\"addTodoInput\"\r\n            onChange={e => this.updateInput(e)}\r\n            type=\"text\"\r\n            placeholder=\"Type in your todos...\"\r\n          />\r\n          <button className=\"button\" type=\"submit\">\r\n            Add Todo\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  updateInput = e => {\r\n    this.setState({ todo: e.target.value });\r\n  };\r\n\r\n  submitTodo = e => {\r\n    e.preventDefault();\r\n    this.props.addTodoFunc(this.state.todo);\r\n    document.getElementById(\"addTodoInput\").value = \"\";\r\n  };\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\nimport \"./logo.css\";\r\n\r\nexport default function Logo() {\r\n  return <h2>Another Boring Todo App</h2>;\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoList from \"./todolist/todolist\";\nimport AddTodo from \"./addtodo/addtodo\";\nimport Logo from \"./logo/Logo\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: []\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"body-bg\">\n        <Logo />\n        <AddTodo addTodoFunc={this.addTodo} />\n        <TodoList updateTodoFn={this.updateTodo} todos={this.state.todos} />\n      </div>\n    );\n  }\n\n  componentDidMount = () => {\n    const todos = localStorage.getItem(\"todos\");\n    if (todos) {\n      const savedTodos = JSON.parse(todos);\n      this.setState({ todos: savedTodos });\n    } else {\n    }\n  };\n\n  addTodo = async todo => {\n    await this.setState({\n      todos: [\n        ...this.state.todos,\n        {\n          text: todo,\n          completed: false\n        }\n      ]\n    });\n    localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n    console.log(localStorage.getItem(\"todos\"));\n  };\n\n  updateTodo = async todo => {\n    const newTodos = this.state.todos.map(_todo => {\n      if (todo === _todo) {\n        return {\n          text: todo.text,\n          completed: !todo.completed\n        };\n      } else {\n        return _todo;\n      }\n    });\n    await this.setState({ todos: newTodos });\n    localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}